// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250418175544_RefactorBodyCompositionToMeasurement")]
    partial class RefactorBodyCompositionToMeasurement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.BodyMeasurementLogs.BodyMeasurementLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Abs")
                        .HasColumnType("numeric")
                        .HasColumnName("abs");

                    b.Property<decimal>("Chest")
                        .HasColumnType("numeric")
                        .HasColumnName("chest");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Hip")
                        .HasColumnType("numeric")
                        .HasColumnName("hip");

                    b.Property<decimal>("LeftBiceps")
                        .HasColumnType("numeric")
                        .HasColumnName("left_biceps");

                    b.Property<decimal>("LeftCalf")
                        .HasColumnType("numeric")
                        .HasColumnName("left_calf");

                    b.Property<decimal>("LeftTigh")
                        .HasColumnType("numeric")
                        .HasColumnName("left_tigh");

                    b.Property<decimal>("Neck")
                        .HasColumnType("numeric")
                        .HasColumnName("neck");

                    b.Property<decimal>("RightBiceps")
                        .HasColumnType("numeric")
                        .HasColumnName("right_biceps");

                    b.Property<decimal>("RightCalf")
                        .HasColumnType("numeric")
                        .HasColumnName("right_calf");

                    b.Property<decimal>("RightTigh")
                        .HasColumnType("numeric")
                        .HasColumnName("right_tigh");

                    b.Property<decimal>("Shoulder")
                        .HasColumnType("numeric")
                        .HasColumnName("shoulder");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Waist")
                        .HasColumnType("numeric")
                        .HasColumnName("waist");

                    b.Property<decimal>("WaistHipRatio")
                        .HasColumnType("numeric")
                        .HasColumnName("waist_hip_ratio");

                    b.HasKey("Id")
                        .HasName("pk_body_measurement_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_body_measurement_logs_user_id");

                    b.ToTable("body_measurement_logs", "public");
                });

            modelBuilder.Entity("Domain.HabitLogs.HabitLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("HabitId")
                        .HasColumnType("integer")
                        .HasColumnName("habit_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_habit_logs");

                    b.HasIndex("HabitId")
                        .HasDatabaseName("ix_habit_logs_habit_id");

                    b.ToTable("habit_logs", "public");
                });

            modelBuilder.Entity("Domain.HabitSchedules.HabitSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<int>("HabitId")
                        .HasColumnType("integer")
                        .HasColumnName("habit_id");

                    b.HasKey("Id")
                        .HasName("pk_habit_schedules");

                    b.HasIndex("HabitId")
                        .HasDatabaseName("ix_habit_schedules_habit_id");

                    b.ToTable("habit_schedules", "public");
                });

            modelBuilder.Entity("Domain.Habits.Habit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<TimeOnly?>("Reminder")
                        .HasColumnType("time without time zone")
                        .HasColumnName("reminder");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_habits");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_habits_user_id");

                    b.ToTable("habits", "public");
                });

            modelBuilder.Entity("Domain.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("HabitId")
                        .HasColumnType("integer")
                        .HasColumnName("habit_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("HabitId")
                        .HasDatabaseName("ix_notifications_habit_id");

                    b.ToTable("notifications", "public");
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on_utc");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("token");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", "public");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("integer")
                        .HasColumnName("activity_level");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<int>("Goal")
                        .HasColumnType("integer")
                        .HasColumnName("goal");

                    b.Property<int?>("GoalWeight")
                        .HasColumnType("integer")
                        .HasColumnName("goal_weight");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<decimal>("WeeklyGoal")
                        .HasColumnType("numeric")
                        .HasColumnName("weekly_goal");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Domain.BodyMeasurementLogs.BodyMeasurementLog", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("BodyMeasurementLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_body_measurement_logs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.HabitLogs.HabitLog", b =>
                {
                    b.HasOne("Domain.Habits.Habit", "Habit")
                        .WithMany("HabitLogs")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habit_logs_habits_habit_id");

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("Domain.HabitSchedules.HabitSchedule", b =>
                {
                    b.HasOne("Domain.Habits.Habit", "Habit")
                        .WithMany("HabitSchedules")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habit_schedules_habits_habit_id");

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("Domain.Habits.Habit", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("Habits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habits_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Domain.Habits.Habit", "Habit")
                        .WithMany("Notifications")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_habits_habit_id");

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Habits.Habit", b =>
                {
                    b.Navigation("HabitLogs");

                    b.Navigation("HabitSchedules");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("BodyMeasurementLogs");

                    b.Navigation("Habits");
                });
#pragma warning restore 612, 618
        }
    }
}
